// This Pine Script™ code is subject to the terms of the Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © EliCobra

//@version=5
indicator("Webhook Alert", "Webhook Alert", false)

type bar
    float o = na
    float h = na
    float l = na
    float c = na

type osc
    bar   b = na
    float s = na
    float h = na

type stoch
    float k = na
    float d = na

type alerts
    bool  s = na
    bool  b = na
    bool  u = na
    bool  d = na
    bool  p = na
    bool  n = na
    bool  x = na
    bool  y = na
    bool  kc = na  // K crosses above D
    bool  kd = na  // K crosses below D

type prompt
    string s = ''
    bool   c = false

method notify(prompt p) =>
    if p.c
        alert(p.s, alert.freq_once_per_bar_close)
        
method any(alerts a) =>
    string s = switch
        a.s => 'OB Signal'              
        a.b => 'OS Signal'              
        a.u => 'Bullish Trend'          
        a.d => 'Bearish Trend'          
        a.p => 'Heikin-Ashi Uptrend  '  
        a.n => 'Heikin-Ashi Downtrend' 
        a.x => 'MACD Bullish Cross'   
        a.y => 'MACD Bearish Cross'    
        =>      na

    prompt.new(s, not na(s))

method src(bar b, simple string src) =>
    float x = switch src
        'open'  =>          b.o
        'high'  =>          b.h
        'low'   =>          b.l
        'close' =>          b.c
        'oc2'   => math.avg(b.o, b.c          )
        'hl2'   => math.avg(b.h, b.l          )
        'hlc3'  => math.avg(b.h, b.l, b.c     )
        'ohlc4' => math.avg(b.o, b.h, b.l, b.c)
        'hlcc4' => math.avg(b.h, b.l, b.c, b.c)

    x

method ha(bar b, simple bool p = true) =>
    var bar x = bar.new(       )
    x.c      := b  .src('ohlc4')
    x        := bar.new(
         na(x.o[1]) ? 
             b.src('oc2') : nz(x.src('oc2')[1]),
         math.max(b.h, math.max(x.o, x.c))     ,
         math.min(b.l, math.min(x.o, x.c))     ,
         x.c                                   )

    p ? x : b

method stmc(bar b, simple string src, simple int flen, simple int slen, simple string sig, simple int clen) =>
    float x = (ta.ema(b.src(src), flen)  - 
               ta.ema(b.src(src), slen)) / 
              (ta.ema(b.h - b.l , slen)) * 100

    bar   z = bar.new(
             x[1]             ,
             math.max(x, x[1]),
             math.min(x, x[1]),
             x                ).ha()

    float s = ta.ema(z.src(sig), clen)

    osc.new(z, s, z.c - s)

// Dual Timeframe Stochastic Implementation
method calcStoch(simple int len, simple int smooth, simple int dlen, simple string timeframe) =>
    [stochHigh, stochLow, stochClose] = request.security(syminfo.tickerid, timeframe, [high, low, close])
    float highest_high = ta.highest(stochHigh, len)
    float lowest_low = ta.lowest(stochLow, len)
    float rawK = 100 * (stochClose - lowest_low) / (highest_high - lowest_low)
    float smoothK = ta.sma(rawK, smooth)
    float d = ta.sma(smoothK, dlen)
    [smoothK, d]

const string gm = "MACD Settings", const string gu = "UI Options", const string gs = "Stochastic Settings"
src  = input.string('close' , "Source"             , ['open',  'high',  'low',  'close',  'hl2',  'hlc3',  'ohlc4',  'hlcc4'],               group = gm)
fast = input.int   (10      , "Fast Length"        ,                                                                                         group = gm)
slow = input.int   (75      , "Slow Length"        ,                                                                                         group = gm)
sigb = input.bool  (true    , "Signal"             ,                                                                           inline = '1', group = gm)
sigs = input.string('close' , "Source"             , ['open',  'high',  'low',  'close',  'hl2',  'hlc3',  'ohlc4',  'hlcc4'], inline = '1', group = gm)
sigl = input.int   (20      , "Length"             ,                                                                           inline = '1', group = gm)
mode = input.string('Hybrid', "Display Mode"       , ['Hybrid',                       'MACD',                    'Histogram'],               group = gu)
revs = input.bool  (true    , ""                   ,                                                                           inline = '0', group = gu)
revt = input.int   (100     , "Reversion Threshold", [100,                                                               150], inline = '0', group = gu)
colb = input.string('None'  , "Bar Coloring"       , ['None', 'MidLine', 'Candles', 'Sig Cross', 'Extremities', 'Reversions'],               group = gu)
hol  = input.bool  (true    , "Hollow Candles"     ,                                                                                         group = gu)
showTurnArrows = input.bool(true, "Show Turn Arrows", group=gu)
turnUpColor = input.color(color.yellow, "Turn Up Color", group=gu)
turnDnColor = input.color(color.white, "Turn Down Color", group=gu)
histUpIncColor = input.color(#369b85, "Histogram Up-Increasing", group=gu)
histUpDecColor = input.color(#f44336, "Histogram Up-Decreasing", group=gu)
histDnIncColor = input.color(#369b85, "Histogram Down-Increasing", group=gu)
histDnDecColor = input.color(#f44336, "Histogram Down-Decreasing", group=gu)
haUpColor = input.color(#369b85, "Heikin-Ashi Up Color", group=gu)
haDownColor = input.color(#f44336, "Heikin-Ashi Down Color", group=gu)
haSignalSize = input.string("Normal", "Heikin-Ashi Signal Size", ["Small", "Normal", "Large"], group=gu)

// Divergence Styling Options
useDivergenceColoring = input.bool(true, "Enable HA/Histogram Divergence Coloring", group=gu)
haUpHistDownColor = input.color(#fdbeff, "HA D ↓", group=gu, tooltip="Heikin-Ashi bullish but MACD momentum weakening")
haDownHistUpColor = input.color(#befff1, "HA D ↑", group=gu, tooltip="Heikin-Ashi bearish but MACD momentum strengthening")

// Divergence Signal Options
showDivergenceSignals = input.bool(true, "Show Divergence Signals", group=gu, tooltip="Display arrow signals for divergence start/end")
showCombinedSignals = input.bool(false, "Show Combined Signals", group=gu, tooltip="Show 'HA D ↑ turn HA ↑' instead of separate start/end signals")
showDivergenceStart = input.bool(true, "Show Divergence Start", group=gu, tooltip="Display HA D ↑/↓ signals when divergence begins")
showDivergenceEnd = input.bool(true, "Show Divergence End", group=gu, tooltip="Display HA ↑/↓ signals when divergence ends")

// Background Fill Options
showBackgroundFills = input.bool(true, "Show Background Fills", group=gu)
upperZoneColor = input.color(color.new(#fc1f1f, 85), "Upper Zone Color", group=gu, tooltip="Background color for overbought/extreme high zones")
lowerZoneColor = input.color(color.new(#369b85, 80), "Lower Zone Color", group=gu, tooltip="Background color for oversold/extreme low zones")
upperZone1 = input.int(50, "Upper Zone 1 Level", group=gu, tooltip="First upper background zone threshold")
upperZone2 = input.int(500, "Upper Zone 2 Level", group=gu, tooltip="Second upper background zone threshold") 
lowerZone1 = input.int(-50, "Lower Zone 1 Level", group=gu, tooltip="First lower background zone threshold")
lowerZone2 = input.int(-500, "Lower Zone 2 Level", group=gu, tooltip="Second lower background zone threshold")

// Dual Timeframe Stochastic Settings
primaryLen = input.int(9, "Primary Stoch K Length", minval=1, group=gs)
primarySmooth = input.int(8, "Primary Stoch K Smoothing", minval=1, group=gs)
primaryDLen = input.int(7, "Primary Stoch D Length", minval=1, group=gs)
primaryRes = input.timeframe("", "Primary Timeframe", group=gs)

refLen = input.int(18, "Reference Stoch K Length", minval=1, group=gs)
refSmooth = input.int(12, "Reference Stoch K Smoothing", minval=1, group=gs)
refDLen = input.int(13, "Reference Stoch D Length", minval=1, group=gs)
refRes = input.timeframe("", "Reference Timeframe", group=gs)

showStoch = input.bool(true, "Show Stochastic", group=gs)
doNotShortLevel = input.int(500, "Do Not Short Level", group=gs)
doNotLongLevel = input.int(-500, "Do Not Long Level", group=gs)

bar   b = bar.new (open, high, low , close      )
osc   o = b  .stmc(src , fast, slow, sigs , sigl)

// Calculate dual timeframe stochastic using the new method
[primaryK, primaryD] = calcStoch(primaryLen, primarySmooth, primaryDLen, primaryRes)
[refK, refD] = calcStoch(refLen, refSmooth, refDLen, refRes)

// Create stoch objects for compatibility with existing code
stoch s = stoch.new(primaryK, primaryD)
stoch sRef = stoch.new(refK, refD)

// Crossover Detection and Signal Logic (moved here for proper declaration order)
bool crossOver = ta.crossover(s.k, s.d)
bool crossUnder = ta.crossunder(s.k, s.d)

// Track previous and current crossovers/crossunders
var float currentCrossOverK = na
var float currentCrossUnderK = na
var float prevCrossOverK = na
var float prevCrossUnderK = na

// Update values on new crossovers/crossunders
if crossOver
    prevCrossOverK := currentCrossOverK
    currentCrossOverK := s.k
if crossUnder
    prevCrossUnderK := currentCrossUnderK
    currentCrossUnderK := s.k

// Higher Low and Lower High conditions
bool higherLowCondition = crossOver and not na(prevCrossOverK) and currentCrossOverK > prevCrossOverK
bool lowerHighCondition = crossUnder and not na(prevCrossUnderK) and currentCrossUnderK < prevCrossUnderK

// Dual timeframe signal conditions
bool bullishSignal = crossOver and s.k > sRef.d
bool bearishSignal = crossUnder and s.k < sRef.d

// Legacy compatibility variables
bool stochCrossover = crossOver
bool stochCrossunder = crossUnder

const color colup = #369b85
const color coldn = #fc1f1f
const color colhu = #8ac3f5
const color colhd = #ffa7b6
var   color colnt = chart.fg_color
color       colh  = 
                      o.h > 0                              ?
                     (o.h > o.h[1]                         ? 
                                     color.new(colhu, 20)  : 
                                     color.new(colhu, 30)) :
                     (o.h > o.h[1]                         ? 
                                     color.new(colhd, 20)  : 
                                     color.new(colhd, 30))

// Detect Heikin-Ashi and Histogram conditions
bool haUp = o.b.c > o.b.o
bool haDown = o.b.c < o.b.o
bool histIncreasing = o.h > o.h[1]
bool histDecreasing = o.h < o.h[1]

// Divergence conditions
bool haUpHistDown = haUp and histDecreasing      // HA bullish but momentum weakening
bool haDownHistUp = haDown and histIncreasing    // HA bearish but momentum strengthening

// Track divergence state changes
var bool wasHaUpHistDown = false
var bool wasHaDownHistUp = false

// Detect when divergence ends (turns back to normal)
bool haUpHistDownEnded = wasHaUpHistDown and not haUpHistDown and haUp
bool haDownHistUpEnded = wasHaDownHistUp and not haDownHistUp and haDown

// Apply divergence coloring if enabled
color haColor = switch
    useDivergenceColoring and haUpHistDown => haUpHistDownColor
    useDivergenceColoring and haDownHistUp => haDownHistUpColor
    haUp => haUpColor
    haDown => haDownColor
    => haUpColor

m   = hline(0                                      , "Mid Line", chart.fg_color,    hline.style_solid )
// Dynamic background zone levels
uz1 = hline(upperZone1                             ,                   display =    display.none      )
uz2 = hline(upperZone2                             ,                   display =    display.none      )
lz1 = hline(lowerZone1                             ,                   display =    display.none      )
lz2 = hline(lowerZone2                             ,                   display =    display.none      )
dns = hline(doNotShortLevel                        , "Do Not Short", color.yellow, hline.style_dotted, 3)
dnl = hline(doNotLongLevel                         , "Do Not Long", color.yellow, hline.style_dotted, 3)
h   = plot (mode != 'Histogram' and sigb ? o.s : na, "Signal"  , colnt                                )
color histColor = na
if o.h > 0
    histColor := o.h > o.h[1] ? histUpIncColor : histUpDecColor
else if o.h < 0
    histColor := o.h > o.h[1] ? histDnIncColor : histDnDecColor
mc  = plot (mode != 'MACD' ? o.h : na, "H", histColor, 1, plot.style_columns)

// Optional background fills (using conditional expressions for global scope)
fill(uz1, uz2, showBackgroundFills ? upperZoneColor : na)
fill(lz2, lz1, showBackgroundFills ? lowerZoneColor : na)

// Determine fill color - solid for divergence conditions, hollow for normal
color haFillColor = (useDivergenceColoring and (haUpHistDown or haDownHistUp)) ? haColor : na

plotcandle(mode != 'Histogram' ? o.b.o  : na                                                    ,
           mode != 'Histogram' ? o.b.h  : na                                                    ,
           mode != 'Histogram' ? o.b.l  : na                                                    ,
           mode != 'Histogram' ? o.b.c  : na                                                    ,
           "𝗠𝗔𝗖𝗗", haFillColor, haColor, bordercolor = haColor)

// Dual Timeframe Stochastic Plot
plot(showStoch ? s.k : na, "Primary %K", color=color.white, linewidth=1)
plot(showStoch ? s.d : na, "Primary %D", color=color.orange, linewidth=1)
plot(showStoch ? sRef.k : na, "Reference %K", color=color.navy, linewidth=1)
plot(showStoch ? sRef.d : na, "Reference %D", color=color.rgb(33, 233, 243), linewidth=2)

// Plot dual timeframe signals
plot(showStoch and bullishSignal ? s.k : na, "Bullish Signal", color=color.green, style=plot.style_cross, linewidth=2)
plot(showStoch and bearishSignal ? s.k : na, "Bearish Signal", color=color.red, style=plot.style_cross, linewidth=2)

// Plot pattern markers
plot(showStoch and higherLowCondition ? currentCrossOverK : na, "Higher Low", color=color.green, style=plot.style_cross, linewidth=2)
plot(showStoch and lowerHighCondition ? currentCrossUnderK : na, "Lower High", color=color.red, style=plot.style_cross, linewidth=2)

// Divergence signal plots - Combined or Separate
// All HA up/down plots removed

// All previous levels removed

// Heikin-Ashi Alert Rules
bullishAlert = o.b.c > 0
bearishAlert = o.b.c < 0

// Webhook Alert Messages
bullishWebhookMsg = '{"symbol": "' + syminfo.ticker + '", "signal": "Bullish", "condition": "HA > 0", "price": ' + str.tostring(close) + ', "time": "' + str.tostring(time) + '"}'
bearishWebhookMsg = '{"symbol": "' + syminfo.ticker + '", "signal": "Bearish", "condition": "HA < 0", "price": ' + str.tostring(close) + ', "time": "' + str.tostring(time) + '"}'

// Send webhook alerts on each candle
if bullishAlert
    alert(bullishWebhookMsg, alert.freq_once_per_bar_close)

if bearishAlert
    alert(bearishWebhookMsg, alert.freq_once_per_bar_close)

color col = switch colb
    'MidLine'     => o.b.c > 0     ? colup                         : coldn
    'Candles'     => o.b.c > o.b.o ? colup                         : coldn
    'Sig Cross'   => o.s   > o.b.c ? coldn                         : colup
    'Extremities' => o.b.c > revt  ? coldn : o.b.c < -revt ? colup : color.new(colnt, 25)
    'Reversions'  => o.h > 0       ? colup : o.h < 0       ? coldn : color.new(colnt, 25)
    'None'        => na

barcolor(col)

// Update divergence state tracking for next bar
wasHaUpHistDown := haUpHistDown
wasHaDownHistUp := haDownHistUp

//Source Construction For Indicator\Strategy Exports
plot(o.b.o           , "open" , editable = false, display = display.none)
plot(o.b.h           , "high" , editable = false, display = display.none)
plot(o.b.l           , "low"  , editable = false, display = display.none)
plot(o.b.c           , "close", editable = false, display = display.none)
plot(o.b.src('hl2'  ), "hl2"  , editable = false, display = display.none)
plot(o.b.src('hlc3' ), "hlc3" , editable = false, display = display.none)
plot(o.b.src('ohlc4'), "ohlc4", editable = false, display = display.none)
plot(o.b.src('hlcc4'), "hlcc4", editable = false, display = display.none)